{"version":3,"sources":["assets/record.tsx","assets/errorMsg.tsx","component/home.tsx","component/play.tsx","app.tsx","reportWebVitals.ts","index.tsx"],"names":["get","path","undefined","localStorage","convertString","split","time","second","Math","floor","toFixed","slice","ErrorMsg","this","props","msg","className","Alert","variant","React","Component","Home","state","isOpen","themes","errorMsg","Axios","then","res","setState","data","catch","error","response","status","Jumbotron","id","Button","onClick","Collapse","in","Card","Table","bordered","map","theme","title","answerCnt","Record","to","Play","gameData","name","description","answers","playData","play","startUnixTime","timer","timerId","input","url","match","params","clearInterval","solve","bestData","bestTime","parseInt","bestSolve","String","forEach","i","answer","endGame","Date","getTime","setInterval","Form","Row","Col","xs","Control","type","value","disabled","InputGroup","Prepend","Text","onChange","e","target","onKeyPress","key","submit","window","location","href","options","text","getTweetText","hashtags","size","answerTable","App","Navbar","bg","Brand","process","Toggle","Nav","Link","Container","basename","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0322d827.chunk.js","sourcesContent":["function get(path: string) {\n  if (localStorage[path] === undefined)\n    return \"未プレイ\";\n  return convertString(localStorage[path]!.split(\",\")[0]) + \" \"\n    + \"(\" + localStorage[path]!.split(\",\")[1] + \")\";\n}\n\nfunction set(path: string, time: number, solve: number) {\n  let bestData = localStorage[path];\n  let bestTime = (bestData === undefined ? 0 : parseInt(bestData.split(\",\")[0]));\n  let bestSolve = (bestData === undefined ? 0 : parseInt(bestData.split(\",\")[1]));\n  if (bestSolve < solve || (bestSolve === solve && time < bestTime)) {\n    localStorage[path] = String(time) + \",\" + String(solve);\n    return true;\n  }\n  return false;\n}\n\nfunction convertString(time: number): string {\n  let second = time % 6000 / 100;\n  let minute = Math.floor(time / 6000);\n  return (\"000\" + minute.toFixed()).slice(-3) + \":\" + (\"0\" + second.toFixed(2)).slice(-5);\n}\n\nfunction getTimerString(startTime: number): string {\n  let now = new Date().getTime() / 10 - startTime;\n  return convertString(now);\n}\n\nexport { get, set, getTimerString, convertString };\n","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\ninterface errorMsgProps {\n  msg: string;\n}\n\nclass ErrorMsg extends React.Component<errorMsgProps> {\n  render() {\n    if (this.props.msg !== \"\")\n      return (\n        <div className=\"error\">\n          <Alert variant=\"danger\">\n            読み込みに失敗しました。再読み込みしてください。({this.props.msg})\n          </Alert>\n        </div>\n      );\n    return (\n      <div className=\"error\">\n      </div>\n    );\n  }\n}\n\nexport default ErrorMsg;\n","import React from 'react';\nimport { Jumbotron, Button, Collapse, Card, Table } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport Axios from 'axios';\n\nimport * as Record from '../assets/record';\nimport ErrorMsg from '../assets/errorMsg';\n\nimport './home.scss';\n\ninterface homeProps {\n}\n\ntype Theme = {\n  title: string;\n  answerCnt: Number;\n  path: string;\n};\n\ninterface homeState {\n  isOpen: boolean;\n  themes: Theme[];\n  errorMsg: string;\n}\n\nclass Home extends React.Component<homeProps, homeState> {\n  constructor(props: homeProps) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      themes: [],\n      errorMsg: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const url = \"./theme.json\";\n    Axios.get<Theme[]>(url).then((res) => {\n      this.setState({ themes: res.data });\n    }).catch(error => {\n      this.setState({ errorMsg: error.response.status });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"home\">\n        <Jumbotron id=\"title\">\n          <h1>言えるかな?</h1>\n          <div>\n            <Button onClick={() => this.setState({ isOpen: !this.state.isOpen })} variant=\"primary\">遊び方</Button>\n            <Collapse in={this.state.isOpen}>\n              <Card>\n                1. 下のリストから挑戦したいお題を選択します。<br />\n                2. ページに飛んで、準備が出来たら開始ボタンを押して3秒のカウントダウンの後開始します。<br />\n                3. 開始したらフォームでお題の答えを出来るだけ入力します。<br />\n                4. 思い浮かばなくなったら、降参ボタンで終了します。<br />\n                5. 結果をツイートするボタンが出てきます<br />\n              </Card>\n            </Collapse>\n          </div>\n        </Jumbotron>\n        <ErrorMsg msg={this.state.errorMsg} />\n        <Table bordered id=\"theme-list\">\n          <thead>\n            <tr>\n              <th id=\"title\">お題</th>\n              <th id=\"answer-cnt\">有効回答数</th>\n              <th id=\"personal-best\">自己ベスト</th>\n              <th id=\"play\"></th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.themes.map((theme) => (\n              <tr key={theme.path}>\n                <td>{theme.title}</td>\n                <td>{theme.answerCnt}</td>\n                <td>{Record.get(theme.path)}</td>\n                <td><Link to={theme.path}>遊ぶ</Link></td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport { Jumbotron, Button, InputGroup, Col, Form, Table } from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Share } from 'react-twitter-widgets'\nimport Axios from 'axios';\n\nimport * as Record from '../assets/record';\nimport ErrorMsg from '../assets/errorMsg';\n\nimport './play.scss';\n\ntype playProps = {} & RouteComponentProps<{ id: string }>;\n\ntype GameStatus = {\n  answer: string;\n  solve: boolean | undefined;\n  time: string | undefined;\n};\n\ntype GameData = {\n  name: string;\n  description: string;\n  answerCnt: number;\n  answers: GameStatus[];\n};\n\ntype PlayData = {\n  play: number;\n  startUnixTime: number;\n  answerCnt: number;\n  answers: GameStatus[];\n};\n\ninterface playState {\n  gameData: GameData;\n  playData: PlayData;\n  timer: number;\n  timerId: NodeJS.Timeout | undefined;\n  input: string;\n  errorMsg: string;\n};\n\nclass Play extends React.Component<playProps, playState> {\n  constructor(props: playProps) {\n    super(props);\n    this.state = {\n      gameData: {\n        name: \"-\",\n        description: \"-\",\n        answerCnt: 0,\n        answers: []\n      },\n      playData: {\n        play: 0,\n        startUnixTime: 0,\n        answerCnt: 0,\n        answers: []\n      },\n      timer: 0,\n      timerId: undefined,\n      input: \"\",\n      errorMsg: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const url = \"./data/\" + this.props.match.params.id + \".json\";\n    Axios.get<GameData>(url).then((res) => {\n      this.setState({ gameData: res.data });\n      this.setState({\n        playData: {\n          play: 0,\n          startUnixTime: 0,\n          answerCnt: res.data.answerCnt,\n          answers: res.data.answers\n        }\n      });\n    }).catch(error => {\n      this.setState({ errorMsg: error.response.status });\n    });\n  }\n\n  endGame() {\n    let playData = this.state.playData;\n    playData.play = 2;\n    this.setState({ playData: playData });\n    clearInterval(this.state.timerId!);\n    Record.set(this.props.match.params.id, this.state.timer, this.state.gameData.answerCnt - this.state.playData.answerCnt);\n  }\n\n  submit() {\n    let playData = this.state.playData;\n    if (this.state.playData.play === 1) {\n      playData.answers.forEach(i => { if (i.answer === this.state.input && !i.solve) { i.solve = true; i.time = Record.convertString(this.state.timer); playData.answerCnt--; } });\n      this.setState({ playData: playData, input: \"\" });\n      if (playData.answerCnt === 0) {\n        this.endGame();\n      }\n    } else if (this.state.playData.play === 0) {\n      playData.play = 1;\n      playData.answers = this.state.gameData.answers;\n      playData.answerCnt = this.state.gameData.answerCnt;\n      playData.answers.forEach(i => { i.solve = false });\n      playData.startUnixTime = Math.floor(new Date().getTime() / 10);\n      let timerId = setInterval(() => { this.setState({ timer: Math.floor(new Date().getTime() / 10 - playData.startUnixTime) }) }, 10);\n      this.setState({ playData: playData, timerId: timerId, input: \"\" });\n    }\n  }\n\n  answerTable(): JSX.Element[] {\n    return this.state.playData.answers.map((answer) => {\n      if (answer.solve) {\n        return (\n          <tr key={answer.answer}>\n            <td>{answer.answer}</td>\n            <td>{answer.time}</td>\n          </tr>\n        );\n      }\n      if (this.state.playData.play === 2) {\n        return (\n          <tr key={answer.answer} id=\"wrong\">\n            <td>{answer.answer}</td>\n            <td>{answer.time}</td>\n          </tr>\n        );\n      }\n      return (\n        <tr key={answer.answer}>\n          <td>-</td>\n          <td>-</td>\n        </tr>\n      );\n    });\n  }\n\n  getTweetText(): string {\n    if (this.state.playData.play === 2) {\n      if (this.state.playData.answerCnt === 0)\n        return \"あなたは\" + Record.convertString(this.state.timer) + \"かけて\" + this.state.gameData.answerCnt + \"個の\" + this.state.gameData.name + \"を全て言えました。\";\n      else\n        return \"あなたは\" + Record.convertString(this.state.timer) + \"かけて\" + (this.state.gameData.answerCnt-this.state.playData.answerCnt) + \"個の\" + this.state.gameData.name + \"を言えました。\" + this.state.playData.answerCnt + \"個言えませんでした。\";\n    }\n    if (this.state.playData.play === 1) {\n      return \"あなたは\" + this.state.gameData.name + \"を全て言うのに挑戦中です。\";\n    }\n    return this.state.gameData.name + \"全て言えるかな?\";\n  }\n\n  render() {\n    return (\n      <div className=\"play\">\n        <Jumbotron id=\"title\">\n          <h3>{this.state.gameData.name}</h3>\n          <div>\n            {this.state.gameData.description}<br />\n            有効回答数: {this.state.gameData.answerCnt}<br />\n            自己ベスト: {Record.get(this.props.match.params.id)}<br />\n          </div>\n        </Jumbotron>\n        <ErrorMsg msg={this.state.errorMsg} />\n        <Form>\n          <Form.Row className=\"align-items-center\">\n            <Col xs=\"auto\">\n              <Form.Control\n                type=\"text\"\n                id=\"timer\"\n                value={Record.convertString(this.state.timer)}\n                disabled={true}\n              />\n            </Col>\n            <Col xs=\"auto\">\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text>残り</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  type=\"text\"\n                  id=\"solve-count\"\n                  value={this.state.playData.answerCnt}\n                  disabled={true}\n                />\n              </InputGroup>\n            </Col>\n            <Col xs=\"auto\">\n              <Form.Control\n                type=\"text\"\n                value={this.state.input}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => { this.setState({ input: e.target.value }) }}\n                onKeyPress={(e: React.KeyboardEvent<HTMLInputElement>) => { if (e.key === \"Enter\") this.submit() }}\n              />\n            </Col>\n            <Col xs=\"auto\">\n              <Button type=\"button\" variant=\"success\" onClick={() => this.submit()}>\n                {(this.state.playData.play === 0 ? \"開始\" : \"回答\")}\n              </Button>\n            </Col>\n            <Col xs=\"auto\">\n              <Button type=\"button\" variant=\"danger\" onClick={() => this.endGame()}>\n                降参\n              </Button>\n            </Col>\n            <Col xs=\"auto\">\n              <Share url={window.location.href} options={{ text: this.getTweetText(), hashtags: \"言えるかな\" }} />\n            </Col>\n          </Form.Row>\n        </Form>\n        <Table bordered id=\"answer-list\" size=\"sm\">\n          <thead>\n            <tr>\n              <th id=\"answer\">答え</th>\n              <th id=\"answer-time\">回答時間</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.answerTable()}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nexport default Play;\n","import React from 'react';\nimport { Navbar, Nav, Container } from 'react-bootstrap';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './component/home';\nimport Play from './component/play';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar bg=\"dark\" variant=\"dark\" className=\"mr-auto\">\n        <Navbar.Brand href={process.env.PUBLIC_URL}>言えるかな?</Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse className=\"justify-content-end\">\n          <Nav>\n            <Nav.Link href=\"https://github.com/ecto0310/can_you_say\">ソースコード</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route exact path='/:id' component={Play} />\n          </Switch>\n        </BrowserRouter>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}